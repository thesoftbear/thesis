#version 430

out vec4 fragment_color;

layout(binding = 0) uniform sampler2D position_texture;
layout(binding = 1) uniform sampler2D normal_texture;

layout(r32f) uniform image2D occlusion_texture;

uniform float pitch;
uniform float roll;
uniform uint cell_count;
uniform float cell_size;
uniform float particle_size;
uniform uint ray_samples;

layout(std430, binding = 2) readonly buffer cellInfoSSBO
{
	uvec2 cell_info[];
};

layout(std430, binding = 3) readonly buffer sortedSSBO
{
	vec4 sorted[];
};

struct ray
{
	vec3 origin;
	vec3 direction;
};

struct sphere
{
	vec3 center;
	float radius;
};

float intersect(ray r, sphere s)
{
	vec3 oc = r.origin - s.center;
	float b = dot(r.direction, oc);
	float c = dot(oc, oc) - s.radius * s.radius;
	float t = b * b - c;
	if( t > 0.0) t = -b - sqrt(t);
	return t;
}

mat4 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

void main()
{
	vec3 fragment_position = texture(position_texture, gl_FragCoord.xy / vec2(1280, 720)).xyz;
    vec3 fragment_normal = texture(normal_texture, gl_FragCoord.xy / vec2(1280, 720)).xyz;

	if(fragment_position == vec3(0)) discard;

	vec3 fragment_right = cross(fragment_normal, vec3(0, 1, 0));
	mat4 pitch_matrix = rotationMatrix(fragment_right, pitch);
	mat4 roll_matrix = rotationMatrix(fragment_normal, roll);

	ray r = ray(fragment_position, (roll_matrix * pitch_matrix * vec4(fragment_normal, 1)).xyz);

	vec3 step = (r.direction / max(max(abs(r.direction.x), abs(r.direction.y)), abs(r.direction.z))) * cell_size;
	vec3 cell_position = r.origin;

	float no_intersection = sqrt(3.0);
	float intersection = no_intersection;
	uint iteration = 0;

	while(intersection == no_intersection)
	{
		// get current hash grid cell

			uvec3 cell_coordinate = uvec3(cell_position * cell_count);
			uint cell_index = cell_coordinate.x + cell_count * (cell_coordinate.y + cell_count * cell_coordinate.z);
			uvec2 current_cell = cell_info[cell_index];

		// loop through particles
		
			for(uint p = 0; p < current_cell.x; p++)
			{
				sphere current_particle;
				current_particle.center = sorted[current_cell.y + p].xyz;
				current_particle.radius = particle_size;

				float current_intersection = intersect(r, current_particle);
				if(current_intersection > 0.0 && current_intersection < intersection) intersection = current_intersection;
			}

		// move to next hashgrid cell

			cell_position += step;

		// check if still inside hashgrid

			if(cell_position.x < 0.0 || cell_position.x > 1.0 || cell_position.y < 0.0 || cell_position.y > 1.0 || cell_position.z < 0.0 || cell_position.z > 1.0) break;
	
			iteration += 1;
	}

	float brightness = pow(intersection / no_intersection, 4.0) * cos(pitch);

	if(ray_samples > 0) brightness += imageLoad(occlusion_texture, ivec2(gl_FragCoord.xy)).x; 

	imageStore(occlusion_texture, ivec2(gl_FragCoord.xy), vec4(brightness));

	float color = brightness / float(ray_samples + 1);

	if(ray_samples + 1 == 10) fragment_color = vec4(pow(color, 2.0) * vec3(0.9, 0.9, 1.0), 1.0);
	else discard;
}