#version 430

layout(local_size_x = 32) in;

// per particle position

layout(std430, binding = 0) readonly buffer particle_data_storage
{
	vec4 particle_data[]; // xyz: position a: future particle radius
};

// per particle cell & index inside cell

layout(std430, binding = 1) writeonly buffer particle_info_storage
{
	uvec2 particle_info[]; // x: cell y: index
};

// per cell particle count & start address

layout(std430, binding = 2) coherent buffer cell_info_storage
{
	uvec2 cell_info[]; // x: count y: address
};

uniform uint grid_resolution;
uniform uint particle_count;


// calculates a position's corresponding cell

ivec3 position_to_cell(vec3 position)
{
	return clamp(ivec3(position * grid_resolution), ivec3(0), ivec3(grid_resolution - 1));
}


// 

uint cell_to_index(ivec3 coordinates)
{
	return (coordinates.z * grid_resolution + coordinates.y) * grid_resolution + coordinates.x;
}

void main()
{
	// get particle

		uint particle_index = gl_GlobalInvocationID.x;

		if(particle_index >= particle_count) return;

	// get cell

		ivec3 cell_coordinates = position_to_cell(particle_data[particle_index].xyz);

		uint cell_index = cell_to_index(cell_coordinates);

	// assign

		particle_info[particle_index] = uvec2(cell_index, atomicAdd(cell_info[cell_index].x, 1));
}