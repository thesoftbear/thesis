#version 430

layout(local_size_x = 32) in;

// per particle position

	layout(std430, binding = 0) readonly buffer particleDataSSBO
	{
		vec4 particle_data[]; // a: future particle radius
	};


// per particle cell & index inside cell

	layout(std430, binding = 1) writeonly buffer particleInfoSSBO
	{
		uvec2 particle_info[]; // x: cell y: index
	};


// per cell particle count & start address

	layout(std430, binding = 2) coherent buffer cellInfoSSBO
	{
		uvec2 cell_info[]; // x: count y: address
	};

       
uniform uint cell_count;

uniform uint particle_count;

uint hash(uvec3 coordinates)
{
	return (coordinates.z * cell_count + coordinates.y) * cell_count + coordinates.x;
}

void main()
{
	// get particle

		uint particle_index = gl_GlobalInvocationID.x;

		if(particle_index >= particle_count) return;

	// get cell

		uvec3 cell_coordinates = uvec3(particle_data[particle_index].xyz * cell_count);

		uint cell_index = hash(cell_coordinates);

	// assign

		particle_info[particle_index] = uvec2(cell_index, atomicAdd(cell_info[cell_index].x, 1));
}