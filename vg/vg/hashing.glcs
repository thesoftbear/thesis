#version 430

layout(local_size_x = 1024) in;


// per particle position

layout(std430, binding = 0) readonly buffer particleSSBO
{
	float particle[];
};


// per particle surrounding cell

layout(std430, binding = 1) writeonly buffer cellsSSBO
{
	uint cell[];
};


// per particle position inside cell

layout(std430, binding = 2) writeonly buffer indicesSSBO
{
	uint index[];
};


// per cell particle count

layout(std430, binding = 3) coherent buffer counterSSBO
{
	uint count[];
};

       
uniform uint cell_count;

uniform uint particle_count;


void main()
{
	// get particle

		uint particle_index = gl_GlobalInvocationID.x;

		if(particle_index >= particle_count) return;

		vec3 particle_position = vec3(particle[particle_index * 3], particle[particle_index * 3 + 1], particle[particle_index * 3 + 2]);

	// get cell

		uvec3 cell_coordinates = uvec3(particle_position * cell_count);

		uint cell_index = cell_count * cell_count * cell_coordinates.z + cell_count * cell_coordinates.y + cell_coordinates.x;

	// assign

		cell[particle_index] = cell_index;

		index[particle_index] = atomicAdd(count[cell_index], 1);
}