#version 430

layout(local_size_x = 128) in;


// per cell particle count

layout(std430, binding = 3) buffer counterSSBO
{
	uint count[];
};


// per cell start address

layout(std430, binding = 4) buffer prefixsumSSBO
{
	uint prefixsum[];
};


// per cell sorted particles

layout(std430, binding = 5) buffer sortedSSBO
{
	vec3 sorted[];
};


// per voxel density value

layout(std430, binding = 1) buffer densitySSBO
{
	uint density[];
};


uniform float voxel_size;

uniform uint voxel_count;

uniform float cell_size;

uniform uint cell_count;


const vec3 samples[27] =
{
	vec3( 1, 1, 1 ) / 6.0 * cell_size,
	vec3( 3, 1, 1 ) / 6.0 * cell_size,
	vec3( 5, 1, 1 ) / 6.0 * cell_size,
	vec3( 1, 3, 1 ) / 6.0 * cell_size,
	vec3( 3, 3, 1 ) / 6.0 * cell_size,
	vec3( 5, 3, 1 ) / 6.0 * cell_size,
	vec3( 1, 5, 1 ) / 6.0 * cell_size,
	vec3( 3, 5, 1 ) / 6.0 * cell_size,
	vec3( 5, 5, 1 ) / 6.0 * cell_size,
	vec3( 1, 1, 3 ) / 6.0 * cell_size,
	vec3( 3, 1, 3 ) / 6.0 * cell_size,
	vec3( 5, 1, 3 ) / 6.0 * cell_size,
	vec3( 1, 3, 3 ) / 6.0 * cell_size,
	vec3( 3, 3, 3 ) / 6.0 * cell_size,
	vec3( 5, 3, 3 ) / 6.0 * cell_size,
	vec3( 1, 5, 3 ) / 6.0 * cell_size,
	vec3( 3, 5, 3 ) / 6.0 * cell_size,
	vec3( 5, 5, 3 ) / 6.0 * cell_size,
	vec3( 1, 1, 5 ) / 6.0 * cell_size,
	vec3( 3, 1, 5 ) / 6.0 * cell_size,
	vec3( 5, 1, 5 ) / 6.0 * cell_size,
	vec3( 1, 3, 5 ) / 6.0 * cell_size,
	vec3( 3, 3, 5 ) / 6.0 * cell_size,
	vec3( 5, 3, 5 ) / 6.0 * cell_size,
	vec3( 1, 5, 5 ) / 6.0 * cell_size,
	vec3( 3, 5, 5 ) / 6.0 * cell_size,
	vec3( 5, 5, 5 ) / 6.0 * cell_size
};


void main()
{
	// get voxel
	
		if(gl_GlobalInvocationID.x >= voxel_count || gl_GlobalInvocationID.y >= voxel_count || gl_GlobalInvocationID.z >= voxel_count) return;

		vec3 voxel_position = vec3(gl_GlobalInvocationID) * voxel_size

	// get search cells

		vec3 offset = vec3(voxel_size);

		uvec3 min = clamp(uvec3((voxel_position - offset) * float(cell_count)), uvec3(0), uvec3(cell_count - 1));
		uvec3 max = clamp(uvec3((voxel_position + offset) * float(cell_count)), uvec3(0), uvec3(cell_count - 1));
}

