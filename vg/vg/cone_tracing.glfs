#version 430

layout(binding = 0) uniform sampler2D position_texture;
layout(binding = 1) uniform sampler2D normal_texture;

layout(r32f) uniform image2D occlusion_texture;

layout(binding = 2) uniform sampler3D voxel_texture;

uniform float opening_angle;
uniform float voxel_size;

struct cone
{
	vec3 origin;
	vec3 direction;
	float alpha;
	float beta;
};

float trace_cone(cone c)
{
	vec3 sample_position = c.origin;
	float sample_distance = voxel_size;
	float occlusion = 0.0;

	float occlusion_limit = 1.0;

	while(occlusion < occlusion_limit && sample_position.x >= 0.0 && sample_position.x <= 1.0 && sample_position.y >= 0.0 && sample_position.y <= 1.0 && sample_position.z >= 0.0 && sample_position.z <= 1.0)
	{
		// get current density value 

			float cone_radius = (sample_distance / sin(c.beta)) * sin(c.alpha);
			float sample_level = clamp(log2((cone_radius * 2.0) / voxel_size), 0.0, 8.0);
			vec3 voxel_position = sample_position;

			float density_value = min(textureLod(voxel_texture, voxel_position, sample_level).r, 1.0);

		// update occlusion

			float lambda = 25.0;
			float weight = 1.0 / (1.0 + lambda * cone_radius);
			occlusion = occlusion + (1.0 - occlusion) * density_value * weight;

		// update sampling position

			sample_distance += 2.0 * cone_radius;
 			sample_position = c.origin + c.direction * sample_distance;
	}

	

	return min(occlusion, occlusion_limit) * (1.0 / occlusion_limit);
}

mat4 create_rotation_matrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

void main()
{
	vec3 fragment_position = texture(position_texture, gl_FragCoord.xy / vec2(1280, 720)).xyz;
    vec3 fragment_normal = texture(normal_texture, gl_FragCoord.xy / vec2(1280, 720)).xyz;

	if(fragment_position == vec3(0) || fragment_normal == vec3(0)) discard;

	vec3 fragment_right = cross(fragment_normal, vec3(0, 1, 0));
	mat4 pitch_matrix = create_rotation_matrix(fragment_right, opening_angle / 2.0);

	cone c;
	c.direction = (pitch_matrix * vec4(fragment_normal, 1)).xyz;
	c.origin = fragment_position + c.direction * voxel_size;
	c.alpha = opening_angle / 2.0;
	c.beta = 1.5708 - c.alpha;

	float occlusion = trace_cone(c);
	
	mat4 roll_matrix = create_rotation_matrix(fragment_normal, 2.094);
	c.direction = (roll_matrix * pitch_matrix * vec4(fragment_normal, 1)).xyz;
	c.origin = fragment_position + c.direction * voxel_size;

	occlusion += trace_cone(c);

	roll_matrix = create_rotation_matrix(fragment_normal, 4.188);
	c.direction = (roll_matrix * pitch_matrix * vec4(fragment_normal, 1)).xyz;
	c.origin = fragment_position + c.direction * voxel_size;

	occlusion += trace_cone(c);

	occlusion /= 3.0;

	imageStore(occlusion_texture, ivec2(gl_FragCoord.xy), vec4(1.0 - occlusion));

	discard;
}