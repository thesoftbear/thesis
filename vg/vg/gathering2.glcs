#version 430

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

// per cell particle count & start address

	layout(std430, binding = 2) readonly buffer cellInfoSSBO
	{
		uvec2 cell_info[]; // x: count y: address
	};


// per cell sorted particles

	layout(std430, binding = 6) readonly buffer sortedSSBO
	{
		vec4 sorted[];
	};


// per voxel density value

	layout(std430, binding = 7) writeonly buffer densitySSBO
	{
		uint density[];
	};

uniform float voxel_size;
uniform uint voxel_count;
uniform uint cell_count;
uniform float particle_size;
uniform float voxel_inside_distance_squared;
uniform float particle_inside_distance_squared;
uniform float outside_distance_squared;
uniform float particle_size_squared;

uint hash(uint x, uint y, uint z)
{
	return (z * cell_count + y) * cell_count + x;
}

float factor = voxel_size / 6.0;

uint readPosition = gl_LocalInvocationIndex;

uint gather(uint cell_index, vec3 voxel_position)
{
	uvec2 current_info = cell_info[cell_index];

	uint cell_density = 0;

	while(readPosition < current_info.x)
	{
		vec3 particle_position = sorted[current_info.y + readPosition].xyz;
		
		readPosition += 32;

		vec3 early_vector = particle_position - voxel_position;
		float squared_distance = dot(early_vector, early_vector);
	
		if(squared_distance >= outside_distance_squared)
		{
			continue;
		}

		if(squared_distance <= voxel_inside_distance_squared || squared_distance <= particle_inside_distance_squared)
		{
			cell_density += 270;
			continue;
		}
	
		vec3 base = particle_position - voxel_position;

		for(uint z = 0; z < 3; z++)
		{
			for(uint y = 0; y < 3; y++)
			{
				for(uint x = 0; x < 3; x++)
				{
					vec3 distance_vector = base - vec3(x, y, z) * factor;
					if(dot(distance_vector, distance_vector) <= particle_size_squared) cell_density += 10;
				}
			}
		}
	}

	readPosition %= current_info.x;

	return cell_density;
}

void main()
{
	// get voxel

		vec3 voxel_position = gl_WorkGroupID * voxel_size + vec3(voxel_size * 0.5);

	// get search cells

		vec3 offset = vec3(voxel_size * 0.5 + particle_size);

		uvec3 min = clamp(uvec3((voxel_position - offset) * cell_count), uvec3(0), uvec3(cell_count - 1));
		uvec3 max = clamp(uvec3((voxel_position + offset) * cell_count), uvec3(0), uvec3(cell_count - 1));

	// for each cell gather density
		
		uint voxel_density = 0;

		for(uint z = min.z; z <= max.z; z++)
		{
			for(uint y = min.y; y <= max.y; y++)
			{
				for(uint x = min.x; x <= max.x; x++)
				{
					voxel_density += gather((z * cell_count + y) * cell_count + x, voxel_position);
				}
			}
		}

		uint voxel_index = (gl_WorkGroupID.z * voxel_count + gl_WorkGroupID.y) * voxel_count + gl_WorkGroupID.x;

		atomicAdd(density[voxel_index], voxel_density);
}

