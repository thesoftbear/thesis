#version 430

layout(local_size_x = 32) in;

struct thread_data { uvec2 info[16]; };

layout(std430, binding = 2) coherent buffer cell_info_storage
{
	thread_data cell_info[]; // x: count y: address
}; 

layout(std430, binding = 3) coherent buffer synchronization_storage
{
	uint global_index;
	uint global_sum;
	uint next_index;
};

shared uint local_buffer[gl_WorkGroupSize.x];
shared uint previous_sum;

void adjacent_synchronization(uint group_index)
{
	while(atomicAdd(next_index, 0) != group_index) {}
		
	previous_sum = global_sum;
	global_sum += local_buffer[gl_WorkGroupSize.x - 1];
	atomicAdd(next_index, 1);
}

void main()
{
	// get start cell
	
		uint group_index = gl_WorkGroupID.x;

	// vector operations

		thread_data t = cell_info[gl_GlobalInvocationID.x];

		vec4 column_1 = vec4(t.info[0].x, t.info[4].x, t.info[8].x,  t.info[12].x);
		vec4 column_2 = vec4(t.info[1].x, t.info[5].x, t.info[9].x,  t.info[13].x) + column_1;
		vec4 column_3 = vec4(t.info[2].x, t.info[6].x, t.info[10].x, t.info[14].x) + column_2;
		vec4 column_4 = vec4(t.info[3].x, t.info[7].x, t.info[11].x, t.info[15].x) + column_3;

		vec4 row_1 = vec4(column_1.x, column_2.x, column_3.x, column_4.x); 
		vec4 row_2 = vec4(column_1.y, column_2.y, column_3.y, column_4.y) + vec4(row_1.a);
		vec4 row_3 = vec4(column_1.z, column_2.z, column_3.z, column_4.z) + vec4(row_2.a);
		vec4 row_4 = vec4(column_1.a, column_2.a, column_3.a, column_4.a) + vec4(row_3.a);

		local_buffer[gl_LocalInvocationID.x] = uint(row_4.a);

		barrier(); 

	// per workgroup prefix & synchronization

		if(gl_LocalInvocationID.x == 0)
		{
			for(uint i = 1; i < gl_WorkGroupSize.x; i++)
			{
				local_buffer[i] += local_buffer[i - 1];
			}
			
			adjacent_synchronization(group_index);
		}

		barrier();
		
	// update with previous sum

		uint offset = previous_sum;

		if(gl_LocalInvocationID.x > 0) offset += local_buffer[gl_LocalInvocationID.x - 1];

		t.info[0].y = offset;
		t.info[1].y = uint(row_1.x) + offset;
		t.info[2].y  = uint(row_1.y) + offset;
		t.info[3].y  = uint(row_1.z) + offset;
		t.info[4].y  = uint(row_1.a) + offset;
		t.info[5].y  = uint(row_2.x) + offset;
		t.info[6].y  = uint(row_2.y) + offset;
		t.info[7].y  = uint(row_2.z) + offset;
		t.info[8].y  = uint(row_2.a) + offset;
		t.info[9].y  = uint(row_3.x) + offset;
		t.info[10].y = uint(row_3.y) + offset;
		t.info[11].y = uint(row_3.z) + offset;
		t.info[12].y = uint(row_3.a) + offset;
		t.info[13].y = uint(row_4.x) + offset;
		t.info[14].y = uint(row_4.y) + offset;
		t.info[15].y = uint(row_4.z) + offset;

		cell_info[gl_GlobalInvocationID.x] = t;
}